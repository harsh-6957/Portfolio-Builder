generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  portfolios    Portfolio[]
  subscription  Subscription?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Portfolio {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  template    String
  published   Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  data        Json
  customization Json?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  analytics   Analytics[]
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  plan      String   @default("free")
  status    String   @default("active")
  startDate DateTime @default(now())
  endDate   DateTime?
  stripeCustomerId String?
  stripeSubscriptionId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Analytics {
  id          String   @id @default(cuid())
  portfolioId String
  date        DateTime @default(now())
  views       Int      @default(0)
  uniqueVisitors Int   @default(0)
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}